) +
scale_y_continuous(
transform = "log10"
) +
xlab("Brain region") +
ylab("Eigen vector centrality score (log 10)") +
ggpubr::theme_pubr() +
theme(legend.position = "none")
p1
subnetwork_betweennes <- lapply(unique_labels, function(label){
subnetwork_vertices <- which(V(graph_obj)$subnetwork == label)
sub_G <- induced_subgraph(graph_obj, vids = subnetwork_vertices)
betweenness(sub_G, directed = TRUE)
})
subnetwork_betweennes <- lapply(unique_labels, function(label){
subnetwork_vertices <- which(V(graph_obj)$subnetwork == label)
sub_G <- induced_subgraph(graph_obj, vids = subnetwork_vertices)
betweenness(sub_G, directed = TRUE)
})
subnetwork_betweenness <- lapply(unique_labels, function(label) {
subnetwork_vertices <- which(V(graph_obj)$subnetwork == label)
sub_G <- induced_subgraph(graph_obj, vids = subnetwork_vertices)
betweenness(sub_G, directed = TRUE)
})
G_simplified <- subgraph.edges(graph_obj, E(graph_obj) >= threshold)
# removes node with low synaptic weight to speed things up
threshold <- 5
G_simplified <- subgraph.edges(graph_obj, E(graph_obj) >= threshold)
G_simplified <- subgraph.edges(graph_obj, E(graph_obj)[weight >= threshold])
betweenness_simplified <- betweenness(G_simplified, directed = TRUE)
betweenness_simplified
betweenness_df <- tibble(
subnetwork = V(graph_obj)$subnetwork,
betweenness = betweenness_simplified
)
betweenness_df <- tibble(
subnetwork = V(G_simplified)$subnetwork,
betweenness = betweenness_simplified
)
betweenness_df
p2 <- betweenness_df %>%
ggplot(aes(
subnetwork, betweenness
)) +
geom_violin(
trim = TRUE,
alpha = 0.7
) +
geom_boxplot(
width = 0.1,
fill = "white",
outlier.shape = NA
) +
scale_y_continuous(
transform = "log10"
) +
xlab("Brain region") +
ylab("Betweenness centrality") +
ggpubr::theme_pubr() +
theme(legend.position = "none")
p2
p2 <- betweenness_df %>%
filter(betweenness != 0) %>%
ggplot(aes(
subnetwork, betweenness
)) +
geom_violin(
trim = TRUE,
alpha = 0.7
) +
geom_boxplot(
width = 0.1,
fill = "white",
outlier.shape = NA
) +
scale_y_continuous(
transform = "log10"
) +
xlab("Brain region") +
ylab("Betweenness centrality") +
ggpubr::theme_pubr() +
theme(legend.position = "none")
p2
p2 <- betweenness_df %>%
filter(betweenness != 0,
subnetwork %in% c("cx", "mb", "sez")) %>%
ggplot(aes(
subnetwork, betweenness
)) +
geom_violin(
trim = TRUE,
alpha = 0.7
) +
geom_boxplot(
width = 0.1,
fill = "white",
outlier.shape = NA
) +
scale_y_continuous(
transform = "log10"
) +
xlab("Brain region") +
ylab("Betweenness centrality") +
ggpubr::theme_pubr() +
theme(legend.position = "none")
p2
p2 <- betweenness_df %>%
filter(
betweenness != 0,
subnetwork %in% c("cx", "mb", "sez")
) %>%
ggplot(aes(
subnetwork, betweenness,
fill = subnetwork
)) +
geom_violin(
trim = TRUE,
alpha = 0.7
) +
geom_boxplot(
width = 0.1,
fill = "white",
outlier.shape = NA
) +
scale_y_continuous(
transform = "log10"
) +
xlab("Brain region") +
ylab("Betweenness centrality") +
ggpubr::theme_pubr() +
theme(legend.position = "none")
p2
p2 <- betweenness_df %>%
filter(
betweenness != 0,
subnetwork %in% c("cx", "mb", "sez")
) %>%
ggplot(aes(
subnetwork, betweenness,
fill = subnetwork
)) +
geom_violin(
trim = TRUE,
alpha = 0.7
) +
geom_boxplot(
width = 0.1,
fill = "white",
outlier.shape = NA
) +
scale_y_continuous(
transform = "log10"
) +
xlab("Brain region") +
ylab("Betweenness centrality (log 10)") +
ggpubr::theme_pubr() +
theme(legend.position = "none")
p2
bet_mdl <- lm(
data = betweenness_df,
betweennes ~ subnetwork
)
bet_mdl <- lm(
data = betweenness_df,
betweenness ~ subnetwork
)
summary(bet_mdl)
bet_mdl <- lm(
data = betweenness_df %>%
filter(
betweenness != 0,
subnetwork %in% c("cx", "mb", "sez")
),
log10(betweenness) ~ subnetwork
)
summary(bet_mdl)
emmeans::emmeans(
bet_mdl,
pairwise ~ subnetwork,
type = "response"
)
emmeans::emmeans(
bet_mdl,
revpairwise ~ subnetwork,
type = "response"
)
n_real <- vcount(graph_obj)
m_real <- ecount(graph_obj)
n_real
m_real
n_sim <- 1
null_metrics <- replicate(n_sim, {
g_er <- erdos.renyi.game(
total_vertices,
total_edges,
type = "gnm",
directed = TRUE
)
cc_er <- transitivity(g_er, type = "average")
apl_er <- mean_distance(g_er, directed = TRUE)
c(cc = cc_er, apl = apl_er)
})
null_metrics <- replicate(n_sim, {
g_er <- sample_gnm(
total_vertices,
total_edges,
directed = TRUE
)
cc_er <- transitivity(g_er, type = "average")
apl_er <- mean_distance(g_er, directed = TRUE)
c(cc = cc_er, apl = apl_er)
})
n_sim <- 1
null_metrics <- replicate(n_sim, {
g_er <- sample_gnm(
total_vertices,
total_edges,
directed = TRUE
)
sample_nodes <- sample(V(g_er), size = 150)
dists <- distances(g_er, v = sample_nodes)
apl_er_approx <- mean(dists[is.finite(dists)])
c(
cc = transitivity(g_er, type = "average"),
apl = apl_er_approx
)
})
n_sim <- 100
null_metrics <- replicate(n_sim, {
g_er <- sample_gnm(
total_vertices,
total_edges,
directed = TRUE
)
sample_nodes <- sample(V(g_er), size = 150)
dists <- distances(g_er, v = sample_nodes)
apl_er_approx <- mean(dists[is.finite(dists)])
c(
cc = transitivity(g_er, type = "average"),
apl = apl_er_approx
)
})
# libs ----
pacman::p_load(
tidyverse,
ggplot2,
ggthemes,
ggokabeito,
igraph,
neuprintr,
future.apply
)
plan(multisession)
null_metrics <- future_replicate(n_sim, {
g_er <- sample_gnm(
total_vertices,
total_edges,
directed = TRUE
)
sample_nodes <- sample(V(g_er), size = 150)
dists <- distances(g_er, v = sample_nodes)
apl_er_approx <- mean(dists[is.finite(dists)])
c(
cc = transitivity(g_er, type = "average"),
apl = apl_er_approx
)
})
plan(sequential)
cc_null_dist <- null_metrics["cc", ]
apl_null_dist <- null_metrics["apl", ]
cc_null_dist
apl_null_dist
avg_clustering
p_val_cc <- sum(cc_null_dist >= avg_clustering) / n_sim
p_val_cc
p_val_apl <- sum(apl_null_dist <= estimated_apl_full_network) / n_sim
p_val_apl
apl_null_dist
p_val_apl <- sum(apl_null_dist >= estimated_apl_full_network) / n_sim
p_val_apl
p_val_apl <- sum(apl_null_dist >= estimated_apl_full_network) / n_sim
p_val_apl
estimated_apl_full_network
p_val_apl <- sum(apl_null_dist <= estimated_apl_full_network) / n_sim
p_val_apl
p_val_apl <- sum(apl_null_dist >= estimated_apl_full_network) / n_sim
p_val_apl
p_val_apl <- sum(apl_null_dist >= estimated_apl_full_network) / n_sim
p_val_apl
n_real
### SM ----
total_degrees <- in_degrees + out_degrees
avg_total_degree <- mean(total_degrees)
avg_total_degree <- round(mean(total_degrees)/ 2)
avg_total_degree
g_lattice <- watts.strogatz.game(
dim = 1,
size = n_real,
nei = avg_total_degree,
p = 0
)
g_lattice <- sample_smallworld(
dim = 1,
size = n_real,
nei = avg_total_degree,
p = 0
)
g_lattice
gamma <- avg_clustering / mean(cc_null_dist)
lambda <- estimated_apl_full_network / mean(apl_null_dist)
sigma <- gamma / lambda
sigma
lambda
gamma
### BA -----
m_param <- round(m_real/n_real)
g_ba <- barabasi.game(
n_real,
power =1,
m = m_param,
directed = TRUE
)
g_ba <- sample_pa(
n_real,
power =1,
m = m_param,
directed = TRUE
)
ba_plot_df <- bind_rows(
as_tibble(out_degree_dist) %>%
mutate(network = "Brain network"),
as_tibble(table(degree_ba)) %>%
mutate(network = "BA model")
)
degree_ba <- degree(g_ba, mode = "out")
degree_ba <- degree(g_ba, mode = "out")
ba_plot_df <- bind_rows(
as_tibble(out_degree_dist) %>%
mutate(network = "Brain network"),
as_tibble(table(degree_ba)) %>%
mutate(network = "BA model")
)
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr()
p3
ba_plot_df
out_degree_dist
ba_plot_df <- bind_rows(
as_tibble(out_degree_dist) %>%
mutate(network = "Brain network"),
as_tibble(table(degree_ba)) %>%
mutate(network = "BA model")
) %>%
rename(degree = 1, frequency = 2) %>%
mutate(degree = as.numeric(as.character(degree)))
ba_plot_df
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr()
p3
degree_ba
table(degree_ba)
m_real
n_real
m_param
ba_plot_df
ba_plot_df <- bind_rows(
as.data.frame(out_degree_dist) %>%
mutate(network = "Brain network"),
as.data.frame(table(degree_ba)) %>%
mutate(network = "BA model")
) %>%
rename(degree = 1, frequency = 2) %>%
mutate(degree = as.numeric(as.character(degree)))
ba_plot_df
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr()
p3
df_real <- as_tibble(out_degree_dist)
names(df_real) <- c("degree", "frequency")
df_real$network <- "Real network"
df_ba <- as_tibble(table(degree_ba))
names(df_ba) <- c("degree", "frequency")
df_ba$network <- "BA model"
ba_plot_df <- bind_rows(df_real, df_ba) %>%
mutate(
degree = as.numeric(as.character(degree))
)
ba_plot_df
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr()
p3
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr() +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed")
p3
degree_ba <- degree(g_ba, mode = "in")
df_real <- as_tibble(in_degree_dist)
names(df_real) <- c("degree", "frequency")
df_real$network <- "Real network"
df_ba <- as_tibble(table(degree_ba))
names(df_ba) <- c("degree", "frequency")
df_ba$network <- "BA model"
ba_plot_df <- bind_rows(df_real, df_ba) %>%
mutate(
degree = as.numeric(as.character(degree))
)
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr() +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed")
p3
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr() +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed") +
xlab("In-degree (k)") +
ylab("Frequency P(k)")
p3
p3 <- ba_plot_df %>%
ggplot(aes(
degree, frequency,
color = network
)) +
geom_point(alpha = 0.7) +
scale_x_log10() +
scale_y_log10() +
ggpubr::theme_pubr() +
xlab("In-degree (k)") +
ylab("Frequency P(k)")
p3
df_real
p4 <- df_real %>%
ggplot(aes(
degree, frequency
)) +
geom_point(alpha = 0.7,
color = "dodgerblue") +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
linetype = "dashed") +
xlab("In-degree (k)") +
ylab("Frequency P(k)") +
ggpubr::theme_pubr()
p4
df_real
p4 <- df_real %>%
mutate(degree = as.numeric(degree)) %>%
ggplot(aes(
degree, frequency
)) +
geom_point(alpha = 0.7,
color = "dodgerblue") +
scale_x_log10() +
scale_y_log10() +
geom_smooth(method = "lm",
se = FALSE,
color = "red",
linetype = "dashed") +
xlab("In-degree (k)") +
ylab("Frequency P(k)") +
ggpubr::theme_pubr()
p4
